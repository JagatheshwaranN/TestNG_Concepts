=====================================================================
1. Annotations
==============
The annotations are listed in the execution order.

@BeforeSuite
@BeforeTest
@BeforeClass
@BeforeMethod
@Test
@AfterMethod
@AfterClass
@AfterTest
@AfterSuite

@BeforeGroups
@AfterGroups

@Factory - It is used to generate the instances for the Test class.

Note:
=====
1. @Test method can be used in method level and class level.
2. We can have any numbers tests when we declare the @Test in class level.

Example
=======
@Test
public class Demo {
    public void demoTest() {};
}

public class Demo {
    @Test
    public void demoTest() {};
}

public class HandleFactoryTest {
    @Factory
    public Object[] createTestInstance() {
        Object[] result = new Object[3];
        for(int i = 0; i < 3; i++) {
            result[i] = new FactoryDemoTest(i);
        }
        return result;
    }
}

public class FactoryDemoTest {
    int id;
    public FactoryDemoTest(int id) {
        this.id = id;
    }
    @Test
    public void displayMessage() {
        System.out.println("Message " + id);
    }
}
=====================================================================
2. Assertion
============
Assertion class is used to handle the hard assertion whereas SoftAssert
class is used to handle the soft assertion.

In TestNG, there are 2 types of Assertion as below.
1. Hard Assertion - Will fail and halt the execution.
2. Soft Assertion - Will capture failure and report at the end of execution.

Hard Assertion
==============
Usage
=====
Assert.assertEqual(actual, expected);

Methods
=======
assertEquals(actual, expected);
assertNotEquals(actual, expected);
assertTrue(boolean);
assertFalse(boolean);
assertSame(actual, expected);
assertNotSame(actual, expected);
assertFail(Msg);
assertNull(Object);
assertNotNull(Object);

Soft Assertion
==============
Usage
=====
SoftAssert softAssert = new SoftAssert();

Methods
=======
softAssert.assertEquals(actual, expected);
softAssert.assertNotEquals(actual, expected);
softAssert.assertTrue(boolean);
softAssert.assertFalse(boolean);
softAssert.assertSame(actual, expected);
softAssert.assertNotSame(actual, expected);
softAssert.assertFail(Msg);
softAssert.assertNull(Object);
softAssert.assertNotNull(Object);
softAssert.assertAll();
=====================================================================
3. Parameter
============
The parameter is used to pass the runtime values to the test methods.
The parameter can be passed in different levels as below.

The Test level parameter takes the precedence over the Suite level
parameter when we have both test level and suite level parameters
defined in the testNG.xml file.

1. Test level
2. Suite level

Usage
=====
public class Demo {
    @Test
    @Parameters({"name"})
    public void demoTest(@Optional("John") String name) {};
}

Note:
=====
1. We have something called Optional parameter in TestNG, which is used
   when we don't pass any values for the actual parameters at runtime.
2. The parameters are passed from the testNG.xml files.
=====================================================================
4. Attributes
=============

1. DependsOnMethod
==================
The dependsOnMethod attribute is used to make the testcase depend on
other testcase. We can have multiple as well as single dependsOnMethod
in a code.

Types of dependsOnMethod
========================
1. Hard Dependency [alwaysRun = false]
2. Soft Dependency [alwaysRun = true]

Usage
=====
public class Demo {

@Test
public void test1() {};

@Test(dependsOnMethod="test1", alwaysRun=true)
public void test2() {};

@Test(dependsOnMethod={"test1", "test2")
public void test3() {};
}

Note:
=====
1. alwaysRun=true attribute is used to run the testcase even if the
   testcase depend on method is failed.
2. In Inherited dependsOnMethod, failing of the method which other test
   methods are depends on, will not ignored and executed as usual. If it
   is implemented between two classes.
3. In normal dependsOnMethod, failing of the method whom other methods
   are depends on will be ignored and not executed.
4. In a class, if we have test methods with dependsOnMethod attribute
   and normal test methods. The execution of normal test methods takes
   precedence over the dependsOnMethod attribute test methods.

2. DependsOnGroups
==================
The dependsOnGroups attribute is used to make the testcase depend on
other testcase. We can have multiple as well as single dependsOnGroups
in a code.

Types of dependsOnGroups
========================
1. Hard Dependency [alwaysRun = false]
2. Soft Dependency [alwaysRun = true]

Usage
=====
public class Demo {

@Test(groups = "smoke")
public void test1() {};

@Test(dependsOnGroups="smoke", groups = "sanity", alwaysRun=true)
public void test2() {};

@Test(dependsOnGroups={"smoke", "sanity")
public void test3() {};
}

Note:
=====
1. alwaysRun=true attribute is used to run the testcase even if the
   testcase depend on groups is failed.
2. Group dependency can be provided in test class and testNG.file.
   Also, the Group dependency can be mentioned in both suite and test
   level. We can include / exclude Groups from execution.
3. In a class, if we have test methods with dependsOnGroups attribute
   and normal test methods. The execution of normal test methods takes
   precedence over the dependsOnGroups attribute test methods.
4. Group dependency can be provided in testNG file under Groups >
   Dependencies > Group Tag. Also, Include / Exclude can be provided
   under Groups > Run > Include / Exclude Tag.

3. Others
=========
1. enable = false => Ignore / disable the test method from execution.
2. expectedExceptions = ArithmeticException.class => Identifies the
   expected exception and throws the same.
3. Priority = 1 => Provides the order of execution for the test method.
4. timeOut = 1000 [ms] => It indicates the test method should run within
   1 second / it will be considered as fail. It can configured in both
   class level and testNG.xml file level.
5. SkipException => It is used to Skip the test method from execution.
6. invocationCount = 5 => It is used to invoke / call the test method
   provided number of times.
7. threadPoolSize = 2 => It is used along with invocationCount, when
   the test methods is called configured number of times, it indicates
   how many threads can be used for execution.
=====================================================================
5. DataProvider
===============
DataProvider is used to provide the test data to the test methods. It
is used for data driven testing. DataProvider can be used with parallel
feature.

DataProvider can be configured in 2 ways.
1. In test class
2. From DataProvider class [We can customize the use of DataProvider]

Note:
=====
DataProvider returns the data as Object.

Usage
=====
public class Demo {

@Test(dataProvider = "data")
public void test1() {};

@DataProvider
public Object[][] data() {};
}

public class Demo {

@Test(dataProvider = "data", dataProviderClass = DataSupplier.class)
public void test1() {};
}

class DataSupplier {

@DataProvider
public Object[][] data() {};
}
=====================================================================
6. Parallel Execution
=====================
In TestNG, parallel execution allows the tests to run concurrently,
improving efficiency and reducing execution time.

Types
=====
1. By Test
2. By Methods
3. By Instances
4. By Classes

Parallel by Test: Multiple <test> blocks run in parallel.
Parallel by Method: Each test method in a class runs in parallel.
Parallel by Instance: Multiple instances of a test class run in parallel.
Parallel by Class: Different classes run in parallel, but their methods
run sequentially within the class.
=====================================================================
7. Test Result
==============
In TestNG, ITestResult interface is used to capture the test method
status, and report it as success, failure or skip. It is useful in
reporting purposes.

Usage
=====
public void(ITestResult result) {
    if(ITestResult.SUCCESS == result.getStatus()) {
        System.out.println(result.getName() + " is passed!");
    }
}
=====================================================================
8. Listeners
============
1. ITestListener
================
In TestNG, ITestListener is an interface that defines methods to listen
to events related to the test execution.

Types
=====
1. Class Level (Implemented in class level using @Listeners annotation)
2. Suite Level (Implemented in suite level from TestNG.xml file)

2. ISuiteListener
=================
ISuiteListener is an interface in TestNG that allows users to define
custom behavior for suite-level events. It provides methods to listen
to events related to test suite execution.

3. IInvokedMethodListener
=========================
IInvokedMethodListener is an interface in TestNG that allows users to
define custom behavior for method invocation events during test execution.
It provides methods to listen to events related to individual test
method invocation.
=====================================================================