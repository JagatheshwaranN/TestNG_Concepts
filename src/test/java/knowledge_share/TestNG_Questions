Questions
=========
1. What is TestNG?
TestNG is a testing framework inspired by JUnit and NUnit but introduces some new functionalities that make
it more powerful and easier to use.

2. What are the advantages of TestNG over JUnit?
1. Firstly, TestNG is capable of producing reports automatically with all the necessary information such
as failed tests, passed tests, test execution times, etc.
2. Secondly, TestNG makes use of annotations such as @BeforeMethod, @Test, etc., which are easily
understandable as their naming is after their working.
3. Thirdly, TestNG provides a grouping of methods by which we can group multiple methods as one unit. In
other words, Grouping performs operations on all the tests in a group at once rather than individually.
4. Fourthly, TestNG provides a test method parameterization, which means we can provide parameters in the
TestNG and call the function repeatedly with different values. Moreover, parameterization helps in data-
driven testing in TestNG.
5. Fifthly, TestNG provides the prioritization of methods. In other words, by defining the priorities of
the methods in TestNG, we can alter the default execution sequence of the test methods according to our wish.
6. In addition to the above, TestNG allows parallel testing, which increases efficiency and improves the
overall running time of test methods.
7. With the TestNG framework, you can easily integrate with other tools such as Maven, Jenkins, etc.
8. Moreover, TestNG provides a feature to run multiple test methods on various browsers to test for cross-
browser compatibility issues on your website. It is cross-browser testing.
9. Additionally, TestNG allows us to run the tests separately. So, if you run the tests and only one test
failed, you can run this test independently in the next execution.
10. Moreover, TestNG allows the test methods to depend on each other. Its also called Test Dependency in
TestNG.
11. Lastly, TestNG provides a bunch of assertion methods for testing more efficiently.

3. What are the different annotations used in TestNG?
Some of the commonly used annotations in TestNG are:
@Test: Marks a method as a test method.
@BeforeSuite: The annotated method will be run before all tests in this suite have run.
@AfterSuite: The annotated method will be run after all tests in this suite have run.
@BeforeTest: The annotated method will be run before any test method belonging to the classes inside
the <test> tag is run.
@AfterTest: The annotated method will be run after all the test methods belonging to the classes inside
the <test> tag have run.
@BeforeGroups: The list of groups that this configuration method will run before. This method is guaranteed
to run shortly before the first test method that belongs to any of these groups is invoked.
@AfterGroups: The list of groups that this configuration method will run after. This method is guaranteed
to run shortly after the last test method that belongs to any of these groups is invoked.
@BeforeClass: The annotated method will be run before the first test method in the current class is invoked.
@AfterClass: The annotated method will be run after all the test methods in the current class have been run.
@BeforeMethod: The annotated method will be run before each test method.
@AfterMethod: The annotated method will be run after each test method.

4. How do you perform dependency testing in TestNG?
TestNG supports the concept of dependency testing through the 'dependsOnMethods' attribute of the @Test
annotation. By specifying the dependencies between test methods, you can ensure that a particular test
method runs only after the successful execution of its dependent methods.

5. How can you run test cases in parallel in TestNG?
TestNG supports parallel execution of test cases by setting the 'parallel' attribute of the <suite> tag
in the testng.xml file. You can specify parallel execution at different levels such as methods, tests,
classes, and suites.

6. Explain parameterization in TestNG.
Parameterization in TestNG allows running the same test method with different sets of data. This can be
achieved using the 'dataProvider' attribute of the @Test annotation, where you specify the name of the
data provider method that returns the test data.

7. What is the purpose of listeners in TestNG?
Listeners are interfaces that allow you to implement custom logic to be notified at specific points
during test execution. You can use them for logging, reporting, or other actions. They allow you to
perform certain actions before or after a test method, a test class, a test suite, etc. TestNG provides
several built-in listeners such as ITestListener, IAnnotationTransformer, ISuiteListener, etc., which
can be implemented to handle different events during the test execution process.

8. What's the difference between @BeforeTest and @BeforeMethod?
@BeforeTest runs before all test methods in a <test> tag of a TestNG XML file. @BeforeMethod runs before
each individual test method in a class.

9. What is the importance of the testng.xml file?
The testng.xml file is an XML configuration file used to define how TestNG executes tests. It allows you
to specify suites, test cases, groups, dependencies, parameters, and other settings.

10. What are the functionalities you can achieve using the testng.xml file?
We use the XML file in TestNG for many purposes. The TestNG XML file helps us:
1. To run multiple tests in order in a single execution.
2. Secondly, it also helps us to include and exclude the test methods and groups.
3. Thirdly, it also helps us to add dependencies in groups.
4. Fourthly, it helps to run the test case methods through parameters.
5. Finally, it assists in the execution of the parallel test execution.

11. How can you achieve data-driven testing in TestNG?
Use the @DataProvider annotation to provide test data for a test method. The data provider method returns
a multidimensional array of data used by the test method for each iteration.
Data providers in TestNG allow you to pass parameters to test methods. A data provider method supplies data
to the test method, enabling you to run the same test method with different sets of data. This is particularly
useful for data-driven testing. You specify the data provider method using the dataProvider attribute of the
@Test annotation.

12. How can you handle failures in TestNG?
TestNG provides assertion methods like assertEquals, assertTrue, etc., to verify expected results. Failing
assertions cause test failures. You can also use exception handling for unexpected errors.

13. Explain the difference between soft assertions and hard assertions in TestNG.
Hard assertions:
================
These are the traditional assertions that stop the test execution as soon as any assertion fails. They
are invoked using Assert.assertEquals(), Assert.assertTrue(), etc.

Soft assertions:
================
Soft assertions do not stop the test execution immediately after a failure. Instead, they collect all
failures and then throw an assertion error at the end of the test. They are invoked using SoftAssert
class methods. They are useful when you want to continue executing subsequent steps after encountering
an assertion failure to gather more information about the test failure.

14. How can you configure TestNG to run tests in a specific order?
TestNG, by default, runs test methods in lexicographic order (i.e., alphabetical order of method names).
However, if you want to run tests in a specific order, you can use the priority attribute of the @Test
annotation. You assign a priority value to each test method, and TestNG executes them in ascending order
of priority.

15. How can you achieve parallel execution of tests with different data sets in TestNG?
This requires a combination of techniques:
1. Use @DataProvider to provide different data sets for the test method.
2. Set the parallel attribute to true in the @Test annotation.
3. Use the threadPoolSize attribute in the @Test annotation to specify the number of threads to use for
parallel execution.
4. Ensure your test methods are independent and don't share state, as parallel execution can lead to
concurrency issues.

16. How would you handle a scenario where a test case depends on the successful execution of another test
case from a different class?
TestNG doesn't directly support inter-class dependencies. However, you can achieve this using a few
workarounds:
1. Listener: Create a custom listener that monitors test execution events. When the first test case
finishes successfully, update a flag or variable accessible to the second test case.
2. TestNG Factory: Develop a factory class that generates test instances with pre-populated data from
the first test case's execution.
3. External data storage: Use a database or shared file to store the result of the first test case and
access it in the second test case.

17. How can you handle dynamic test cases or scenarios where the number of tests is not known beforehand?
TestNG allows you to dynamically generate test cases at runtime using the @Factory annotation. You can
create a factory method that generates instances of your test class with different configurations or
parameters. Each generated instance represents a separate test case, and TestNG will execute them
accordingly. This approach is useful when the number of test cases is not known beforehand or when you
need to create tests dynamically based on certain conditions or inputs.

18. Re-running Failed Tests?
1. TestNG Listeners: Implement a custom ITestListener to capture failed test information during execution
(e.g., test method name, class name).
testng.xml Configuration: Create a separate testng.xml file listing only the failed tests identified by the
listener.
Command-Line Execution: Use the testng -rerun failed.xml command to re-run only the failed tests from the
captured information.

19. Define the correct order of tags in the TestNG XML file.
The correct order followed to run the TestNG suite from the XML file is as follows:
<suite>
  <test>
    <classes>
        <class>
            <methods>
            </methods>
        </class>
    </classes>
  </test>
</suite>

20. What are the types of reports generated in TestNG by default?
TestNG generates two types of reports by default after the execution of all the test methods finishes.
They are:
1. Emailable Reports
2. Index Reports

21. Where is the emailable report & index report generated and saved in TestNG?
1. Emailable reports generate under the project folder and test-output subfolder. This report is available
as "emailable-report.html" by default.
2. The index report generates under the project folder and test-output subfolder. Moreover, this report is
available as "index.html" by default.

22. When we declare parameters at both Test and Suite level inside the XML file, which will get the priority?
When we declare the parameters for the test methods at test level and suite level. Then, TestNG will take the
parameter defined at the test level instead of Suite level, which indicates that the parameter defined at
test level takes priority than the suite level.

23. What is mean by Optional Parameter in TestNG?
Optional parameters are yet another type of parameter which kind of acts like the "default" attribute of the
switch case in programming languages. So, if no parameter value is specified, the optional parameter value is
taken. Optional parameters are defined similarly to Parameters (with annotations), but the place they occupy
is different.
@Test
@Parameters({ "Message"})
public void testTestLevelParameter(@Optional("Have a good day!") String message) {
    System.out.println("Hello! "+ message);
}

24. How do you exclude a group from the test execution cycle?
Excluding a group in TestNG denotes that this particular group refrains from running during the execution,
and TestNG will ignore it. Additionally, the name of the group that we want to exclude is defined in the
XML file  by the following syntax:
<test>
<groups>
  <run>
    <exclude name = "demo">
    </exclude>
   </run>
</groups>
</test>

25. Can we use regular expression in TestNG groups? Write a demo XML file for the same.
Yes, regular expressions can be used in TestNG to execute the groups which have some typical pattern in
their name. For example, if I want to run all the groups with a name starting from "func", then I can write
the regular expression as func.* in the XML file.
<test>
<groups>
  <run>
    <include name = "func.*">
    </include>
   </run>
</groups>
</test>

26. What is the significance of "timeout" in TestNG?
In TestNG, "timeout" is a parameter that defines the maximum time that a method can take for execution.
The timeout parameter is handy if the execution time is a constraint during testing, or the tester wants
to take precautions against the endless execution of tests. We can declare the timeout parameter at:
1. Suite level: To put a time constraint on all the methods in the suite.
2. Method level: To put the time constraint on a particular method.
Syntax: @Test (timeout = 1000)

27. What is meant by invocationCount in TestNG?
The invocationCount is an attribute that defines the number of times a test method has to run in a
single execution. So, if the invocationCount sets as 5, then the test method would run five times each
time I execute the TestNG test case.
Syntax: @Test (invocationCount = 5)

28. What is meant by parallel test execution in TestNG?
The parallel test execution means executing different test methods simultaneously, i.e., parallel in TestNG.
It is achieved by creating threads and assigning these threads to different test methods (which is done
automatically and is an operating system's job). Moreover, running the tests parallel rather than sequentially
is very efficient.

29. On what levels can we apply parallel testing in TestNG?
Parallel testing can apply at four different levels in TestNG:
1. Methods: This will run the parallel tests on all @Test methods in TestNG.
2. Tests: All the test cases present inside the <test> tag will run with this value.
3. Classes: All the test cases present inside the classes that exist in the XML will run in parallel.
4. Instances: This value will run all the test cases parallel inside the same instance.

30. How is exception handling done in TestNG?
We carry out Exception handling in TestNG by defining the exception at the @Test annotation level. If
we proceed in such a manner, the test case will not fail even after raising an exception.
Example:
@Test (expectedException = numberFormatException.class)
A tester can write any type of exception here instead of numberFormatException.

31. Can we disable a test in TestNG? If so, explain how?
Yes, disabling a test can be achieved in TestNG. Once we disable a test, it will not run in the next
execution cycle. Moreover, we accomplish this by using the "enabled" attribute.
Syntax: @Test (enabled = False)

32. Can we give a negative priority in TestNG?
Negative priorities are acceptable in TestNG. However, you can provide an integer value to the priority
parameter, including zero.

33. Why is the reporter class used in TestNG?
The reporter class in TestNG logs the tester defined messages into the reports generated by TestNG.
These logged messages then print into the reports, which we can share with the team.

34. Define the syntax for generating logs through the reporter class in TestNG.
Reporter class logs tester-defined messages onto the reports generated by TestNG.
Syntax: Reporter.log("message");

35. What is @Factory annotation in TestNG?
The @Factory annotation in TestNG is used to create a factory method that generates instances of test
classes or test cases at runtime. This is particularly useful when you need to dynamically generate
test cases based on certain conditions, parameters, or configurations.

36. What is the difference between @Factory and @Dataprovider annotations?
@Factory and @Dataprovider are two types of annotations available in TestNG, which look similar in their
working but are different.
@Factory: The use of the factory annotation is when the tester needs to execute the test methods multiple
times, which are present in the same class. Additionally, we achieve this by creating different instances
of the same class.
@Dataprovider: The dataprovider annotation enables the tester to run a test method multiple times using a
different set of data provided by the dataprovider.

37. Give some types Of Listeners In TestNG?
TestNG provides a bunch of listeners as a part of its testing environment. These listeners are as follows:
1. ITestListener
2. IReporter
3. ISuiteListener
4. IInvokedMethod
5. IHookable
6. IConfigurationListener
7. IConfigurableListener
8. IAnnotationTransformer
9. IExecution
10. IMethodInterceptor

38. What is ITestListener in TestNG?
ITestListener is the most used listener in TestNG with Selenium webdriver. The ITestListener implements
since it is an interface, and the class in which we implement the listener overrides the ITestListener
methods. ITestListener listens to specific events (depending on its methods) and executes the code
written inside the method.  With ITestListener in TestNG, we can also log the events onto the reports
using the Selenium web driver.
It is important to note here that Listeners can implement in two ways in TestNG:
At the class level: Annotating listeners on each class in the test code.
At the suite level: Define the class names to implement listeners in the TestNG XML file.

39. What is IReportListener in TestNG?
The IReporter interface in the TestNG Listener provides us with a medium to generate custom reports
(i.e., customize the reports generated by TestNG). The interface contains a method called generateReport()
which we invoke when all the suites have run. This method takes three arguments:
1. xmlSuite: This is the list of suites that exist in the XML file for execution.
2. suites: This is an object which contains all the information about the test execution and suite related
information. This information may include the package names, class names, test method names, and the test
execution results.
3. outputDirectory: It contains the path to the output folder where the generated reports will be available.

40. What is ISuiteListener in TestNG?
ISuiteListener is an interface provided by TestNG that allows you to listen to events related to TestNG
suites. It enables you to perform custom actions or implement custom behavior at various points in the
TestNG suite execution lifecycle.
Here are some key points about ISuiteListener:
1. Suite-Level Events: ISuiteListener provides methods to listen to suite-level events such as the start
and finish of a TestNG suite.
2. Customization: You can implement ISuiteListener to customize the behavior of your TestNG suites. This
includes actions such as setting up preconditions before the suite starts or performing cleanup tasks
after the suite finishes.
3. Access Suite Information: Through ISuiteListener, you can access information about the suite being
executed, such as the suite name, test classes included in the suite, and suite parameters.
4. Integration: You can integrate ISuiteListener into your TestNG test suite by implementing its methods
and configuring it in your testng.xml file.

One should note that if the parent suite contains child suites as well, then the child suites are executed
before the parent suite. It helps to retrieve the combined results from child suites reflecting onto the
parent suites.

41. What is IInvokedMethodListener in TestNG?
IInvokedMethodListener is an interface in TestNG that allows users to define custom behavior for method
invocation events during test execution. It provides methods to listen to events related to individual
test method invocation. TestNG invokes these methods before and after each test method is invoked, enabling
users to perform custom actions or behaviors based on method execution events.

Here are some of the notable methods provided by the IInvokedMethodListener interface:
beforeInvocation(IInvokedMethod method, ITestResult testResult): This method is invoked before a test method
is invoked. It provides an IInvokedMethod object representing the method being invoked and an ITestResult
object representing the test result.

afterInvocation(IInvokedMethod method, ITestResult testResult): This method is invoked after a test method is
invoked. It provides the same parameters as beforeInvocation.

42. What is IHookable Listeners in TestNG?
IHookable listener is used to performing some tasks before running a method such as JAAS authentication
or setting permissions for the test methods etc. Additionally, the IHookable listener interface runs its
run() method instead of the @Test method whenever found during the execution. This @Test method is although
passed on and encapsulated in an IHookCallBack object, which can be run by invoking the runTestMethod
function from the IHookable interface as in IHookable.runTestMethod().

43. What is IConfiguration Listeners in TestNG?
The IConfigurationListener in TestNG triggers only when the configuration methods pass, fail, or skip.
The IConfiguration listener has the following methods:
1. onConfigurationSuccess: The success of the configuration method invokes this method.
Syntax: void onConfigurationSuccess(ITestResult itr);

2. onConfigurationFailure: The failure of the configuration method invokes this method.
Syntax: void onConfigurationFailure(ITestResult itr);

3. onConfigurationSkip: This method is invoked when the configuration method is skipped.
Syntax: void onConfigurationSkip(ITestResult itr);

44. What is IConfigurable Listener in TestNG?
The IConfiguration listener provides us with a run() method. This method invokes instead of each
configuration method that we find. The invocation of the configuration method, however, happens when
we call the callback() function through the IConfigureCallBack parameter.
Syntax: void run(IConfigureCallBack callback, ITestResult testresult);

45. What is IAnnotationTransformer Listeners in TestNG?
The IAnnotationTransformer listener, as its name suggests, transforms the annotation provided inside
the test case code. These annotations transform through the "transform" method available in the listener.
This method will detect the annotation and then transform it according to the code written inside the
method. The transform method contains the following parameters:

1. annotation: This is the annotation that was read from your test class.
2. testClass: I1f the annotation were found in a class, this parameter would then represent the class
(otherwise null).
3. testMethod: If the annotation was found on the method, this parameter would then represent the method
( otherwise null).
4. testConstructor: If the annotation were found on a constructor, this parameter would then represent
that constructor (otherwise null).

It is important to note that at least one of the parameters should contain a value other than null,
i.e., all the parameters cannot be null.

Syntax: void transform( ITestAnnotation annotation, java.lang.Class testClass, java.lang.reflect.Constructor
testConstructor, java.lang.reflect.method testMethod);

46. What is IExecutionListener in TestNG?
The IExecutionListener listener monitors the start and the end of a test or a suite. The IExecutionListener
contains two methods:
1. onExecutionStart: This method invokes before the test start.
2. onExecutionFinish: This method invokes after all the tests/suites have finished the execution.

47. What is IMethodInterceptor Listener in TestNG?
IMethodInterceptor listener alters or modifies the list of tests that will be executed by TestNG. By using
the IMethodInterceptor listener, we run the intercept method, which returns the list of methods that will
be run by TestNG. Now the TestNG will run the methods in the same order that returned in the list. The
IMethodInterceptor listener in TestNG contains only one method:

intercept: This method returns the list of methods that will be executed by TestNG.




