Questions
=========
1. What is TestNG?
TestNG is a testing framework inspired by JUnit and NUnit but introduces some new functionalities that make
it more powerful and easier to use.

2. What are the advantages of TestNG over JUnit?
1. Firstly, TestNG is capable of producing reports automatically with all the necessary information such
as failed tests, passed tests, test execution times, etc.
2. Secondly, TestNG makes use of annotations such as @BeforeMethod, @Test, etc., which are easily
understandable as their naming is after their working.
3. Thirdly, TestNG provides a grouping of methods by which we can group multiple methods as one unit. In
other words, Grouping performs operations on all the tests in a group at once rather than individually.
4. Fourthly, TestNG provides a test method parameterization, which means we can provide parameters in the
TestNG and call the function repeatedly with different values. Moreover, parameterization helps in data-
driven testing in TestNG.
5. Fifthly, TestNG provides the prioritization of methods. In other words, by defining the priorities of
the methods in TestNG, we can alter the default execution sequence of the test methods according to our wish.
6. In addition to the above, TestNG allows parallel testing, which increases efficiency and improves the
overall running time of test methods.
7. With the TestNG framework, you can easily integrate with other tools such as Maven, Jenkins, etc.
8. Moreover, TestNG provides a feature to run multiple test methods on various browsers to test for cross-
browser compatibility issues on your website. It is cross-browser testing.
9. Additionally, TestNG allows us to run the tests separately. So, if you run the tests and only one test
failed, you can run this test independently in the next execution.
10. Moreover, TestNG allows the test methods to depend on each other. Its also called Test Dependency in
TestNG.
11. Lastly, TestNG provides a bunch of assertion methods for testing more efficiently.

3. What are the different annotations used in TestNG?
Some of the commonly used annotations in TestNG are:
@Test: Marks a method as a test method.
@BeforeSuite: The annotated method will be run before all tests in this suite have run.
@AfterSuite: The annotated method will be run after all tests in this suite have run.
@BeforeTest: The annotated method will be run before any test method belonging to the classes inside
the <test> tag is run.
@AfterTest: The annotated method will be run after all the test methods belonging to the classes inside
the <test> tag have run.
@BeforeGroups: The list of groups that this configuration method will run before. This method is guaranteed
to run shortly before the first test method that belongs to any of these groups is invoked.
@AfterGroups: The list of groups that this configuration method will run after. This method is guaranteed
to run shortly after the last test method that belongs to any of these groups is invoked.
@BeforeClass: The annotated method will be run before the first test method in the current class is invoked.
@AfterClass: The annotated method will be run after all the test methods in the current class have been run.
@BeforeMethod: The annotated method will be run before each test method.
@AfterMethod: The annotated method will be run after each test method.

4. How do you perform dependency testing in TestNG?
TestNG supports the concept of dependency testing through the 'dependsOnMethods' attribute of the @Test
annotation. By specifying the dependencies between test methods, you can ensure that a particular test
method runs only after the successful execution of its dependent methods.

5. How can you run test cases in parallel in TestNG?
TestNG supports parallel execution of test cases by setting the 'parallel' attribute of the <suite> tag
in the testng.xml file. You can specify parallel execution at different levels such as methods, tests,
classes, and suites.

6. Explain parameterization in TestNG.
Parameterization in TestNG allows running the same test method with different sets of data. This can be
achieved using the 'dataProvider' attribute of the @Test annotation, where you specify the name of the
data provider method that returns the test data.

7. What is the purpose of listeners in TestNG?
Listeners are interfaces that allow you to implement custom logic to be notified at specific points
during test execution. You can use them for logging, reporting, or other actions. They allow you to
perform certain actions before or after a test method, a test class, a test suite, etc. TestNG provides
several built-in listeners such as ITestListener, IAnnotationTransformer, ISuiteListener, etc., which
can be implemented to handle different events during the test execution process.

8. What's the difference between @BeforeTest and @BeforeMethod?
@BeforeTest runs before all test methods in a <test> tag of a TestNG XML file. @BeforeMethod runs before
each individual test method in a class.

9. What is the importance of the testng.xml file?
The testng.xml file is an XML configuration file used to define how TestNG executes tests. It allows you
to specify suites, test cases, groups, dependencies, parameters, and other settings.

10. What are the functionalities you can achieve using the testng.xml file?
We use the XML file in TestNG for many purposes. The TestNG XML file helps us:
1. To run multiple tests in order in a single execution.
2. Secondly, it also helps us to include and exclude the test methods and groups.
3. Thirdly, it also helps us to add dependencies in groups.
4. Fourthly, it helps to run the test case methods through parameters.
5. Finally, it assists in the execution of the parallel test execution.

11. How can you achieve data-driven testing in TestNG?
Use the @DataProvider annotation to provide test data for a test method. The data provider method returns
a multidimensional array of data used by the test method for each iteration.
Data providers in TestNG allow you to pass parameters to test methods. A data provider method supplies data
to the test method, enabling you to run the same test method with different sets of data. This is particularly
useful for data-driven testing. You specify the data provider method using the dataProvider attribute of the
@Test annotation.

12. How can you handle failures in TestNG?
TestNG provides assertion methods like assertEquals, assertTrue, etc., to verify expected results. Failing
assertions cause test failures. You can also use exception handling for unexpected errors.

13. Explain the difference between soft assertions and hard assertions in TestNG.
Hard assertions:
================
These are the traditional assertions that stop the test execution as soon as any assertion fails. They
are invoked using Assert.assertEquals(), Assert.assertTrue(), etc.

Soft assertions:
================
Soft assertions do not stop the test execution immediately after a failure. Instead, they collect all
failures and then throw an assertion error at the end of the test. They are invoked using SoftAssert
class methods. They are useful when you want to continue executing subsequent steps after encountering
an assertion failure to gather more information about the test failure.

14. How can you configure TestNG to run tests in a specific order?
TestNG, by default, runs test methods in lexicographic order (i.e., alphabetical order of method names).
However, if you want to run tests in a specific order, you can use the priority attribute of the @Test
annotation. You assign a priority value to each test method, and TestNG executes them in ascending order
of priority.

15. How can you achieve parallel execution of tests with different data sets in TestNG?
This requires a combination of techniques:
1. Use @DataProvider to provide different data sets for the test method.
2. Set the parallel attribute to true in the @Test annotation.
3. Use the threadPoolSize attribute in the @Test annotation to specify the number of threads to use for
parallel execution.
4. Ensure your test methods are independent and don't share state, as parallel execution can lead to
concurrency issues.

16. How would you handle a scenario where a test case depends on the successful execution of another test
case from a different class?
TestNG doesn't directly support inter-class dependencies. However, you can achieve this using a few
workarounds:
1. Listener: Create a custom listener that monitors test execution events. When the first test case
finishes successfully, update a flag or variable accessible to the second test case.
2. TestNG Factory: Develop a factory class that generates test instances with pre-populated data from
the first test case's execution.
3. External data storage: Use a database or shared file to store the result of the first test case and
access it in the second test case.

17. How can you handle dynamic test cases or scenarios where the number of tests is not known beforehand?
TestNG allows you to dynamically generate test cases at runtime using the @Factory annotation. You can
create a factory method that generates instances of your test class with different configurations or
parameters. Each generated instance represents a separate test case, and TestNG will execute them
accordingly. This approach is useful when the number of test cases is not known beforehand or when you
need to create tests dynamically based on certain conditions or inputs.

18. Re-running Failed Tests?
1. TestNG Listeners: Implement a custom ITestListener to capture failed test information during execution
(e.g., test method name, class name).
testng.xml Configuration: Create a separate testng.xml file listing only the failed tests identified by the
listener.
Command-Line Execution: Use the testng -rerun failed.xml command to re-run only the failed tests from the
captured information.

19. Define the correct order of tags in the TestNG XML file.
The correct order followed to run the TestNG suite from the XML file is as follows:
<suite>
  <test>
    <classes>
        <class>
            <methods>
            </methods>
        </class>
    </classes>
  </test>
</suite>

20. What are the types of reports generated in TestNG by default?
TestNG generates two types of reports by default after the execution of all the test methods finishes.
They are:
1. Emailable Reports
2. Index Reports

21. Where is the emailable report & index report generated and saved in TestNG?
1. Emailable reports generate under the project folder and test-output subfolder. This report is available
as "emailable-report.html" by default.
2. The index report generates under the project folder and test-output subfolder. Moreover, this report is
available as "index.html" by default.

22. When we declare parameters at both Test and Suite level inside the XML file, which will get the priority?
When we declare the parameters for the test methods at test level and suite level. Then, TestNG will take the
parameter defined at the test level instead of Suite level, which indicates that the parameter defined at
test level takes priority than the suite level.

23. What is mean by Optional Parameter in TestNG?
Optional parameters are yet another type of parameter which kind of acts like the "default" attribute of the
switch case in programming languages. So, if no parameter value is specified, the optional parameter value is
taken. Optional parameters are defined similarly to Parameters (with annotations), but the place they occupy
is different.
@Test
@Parameters({ "Message"})
public void testTestLevelParameter(@Optional("Have a good day!") String message) {
    System.out.println("Hello! "+ message);
}

24. How do you exclude a group from the test execution cycle?
Excluding a group in TestNG denotes that this particular group refrains from running during the execution,
and TestNG will ignore it. Additionally, the name of the group that we want to exclude is defined in the
XML file  by the following syntax:
<test>
<groups>
  <run>
    <exclude name = "demo">
    </exclude>
   </run>
</groups>
</test>

25. Can we use regular expression in TestNG groups? Write a demo XML file for the same.
Yes, regular expressions can be used in TestNG to execute the groups which have some typical pattern in
their name. For example, if I want to run all the groups with a name starting from "func", then I can write
the regular expression as func.* in the XML file.
<test>
<groups>
  <run>
    <include name = "func.*">
    </include>
   </run>
</groups>
</test>

